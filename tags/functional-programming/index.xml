<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>functional programming on Jeff Kwak&#39;s Web Log</title>
    <link>https://jeffkwak.com/tags/functional-programming/</link>
    <description>Recent content in functional programming on Jeff Kwak&#39;s Web Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 13 Sep 2020 10:50:49 -0400</lastBuildDate>
    
	<atom:link href="https://jeffkwak.com/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Railway Web API with C#</title>
      <link>https://jeffkwak.com/posts/railway-web-api-csharp/</link>
      <pubDate>Sun, 13 Sep 2020 10:50:49 -0400</pubDate>
      
      <guid>https://jeffkwak.com/posts/railway-web-api-csharp/</guid>
      <description>Airing of Grievances There are a lot of ways of returning validation or business errors from a web API. A common pattern is to do some sort of exception handling and then map the exception to an HTTP status code somewhere: Exception Handing in ASP.NET Web API. This is such a common pattern, and honestly there&amp;rsquo;s really nothing wrong with it at all.
However, there&amp;rsquo;s just something about exceptions that bother me when they&amp;rsquo;re used for problems that might happen through the normal processing of a request, such as a user input being out of bounds, a missing required field, et.</description>
    </item>
    
  </channel>
</rss>